var path = require("path");
var fs = require("fs");
var copy = require("dryice").copy;
function removeAmdefine(a) {
	a = String(a).replace(/if\s*\(typeof\s*define\s*!==\s*'function'\)\s*{\s*var\s*define\s*=\s*require\('amdefine'\)\(module,\s*require\);\s*}\s*/g, "");
	a = a.replace(/\b(define\(.*)('amdefine',?)/gm, "$1");
	return a
}
removeAmdefine.onRead = true;
function makeNonRelative(a) {
	return a.replace(/require\('.\//g, "require('source-map/").replace(/\.\.\/\.\.\/lib\//g, "")
}
makeNonRelative.onRead = true;
function buildBrowser() {
	console.log("\nCreating dist/source-map.js");
	var a = copy.createCommonJsProject({roots: [path.join(__dirname, "lib")]});
	copy({
		source: ["build/mini-require.js", {
			project: a,
			require: ["source-map/source-map-generator", "source-map/source-map-consumer", "source-map/source-node"]
		}, "build/suffix-browser.js"], filter: [copy.filter.moduleDefines, removeAmdefine], dest: "dist/source-map.js"
	})
}
function buildBrowserMin() {
	console.log("\nCreating dist/source-map.min.js");
	copy({source: "dist/source-map.js", filter: copy.filter.uglifyjs, dest: "dist/source-map.min.js"})
}
function buildFirefox() {
	console.log("\nCreating dist/SourceMap.jsm");
	var b = copy.createCommonJsProject({roots: [path.join(__dirname, "lib")]});
	copy({
		source: ["build/prefix-source-map.jsm", {
			project: b,
			require: ["source-map/source-map-consumer", "source-map/source-map-generator", "source-map/source-node"]
		}, "build/suffix-source-map.jsm"],
		filter: [copy.filter.moduleDefines, removeAmdefine, makeNonRelative],
		dest: "dist/SourceMap.jsm"
	});
	console.log("\nCreating dist/test/Utils.jsm");
	b = copy.createCommonJsProject({roots: [__dirname, path.join(__dirname, "lib")]});
	copy({
		source: ["build/prefix-utils.jsm", "build/assert-shim.js", {
			project: b,
			require: ["test/source-map/util"]
		}, "build/suffix-utils.jsm"],
		filter: [copy.filter.moduleDefines, removeAmdefine, makeNonRelative],
		dest: "dist/test/Utils.jsm"
	});
	function c(d) {
		return /^test\-.*?\.js/.test(d)
	}

	var a = fs.readdirSync(path.join(__dirname, "test", "source-map")).filter(c);
	a.forEach(function (d) {
		console.log("\nCreating", path.join("dist", "test", d.replace(/\-/g, "_")));
		copy({
			source: ["build/test-prefix.js", path.join("test", "source-map", d), "build/test-suffix.js"],
			filter: [removeAmdefine, makeNonRelative, function (e, f) {
				return e.replace("define(", 'define("' + path.join("test", "source-map", d.replace(/\.js$/, "")) + '", ["require", "exports", "module"], ')
			}, function (e, f) {
				return e.replace("{THIS_MODULE}", function () {
					return "test/source-map/" + d.replace(/\.js$/, "")
				})
			}],
			dest: path.join("dist", "test", d.replace(/\-/g, "_"))
		})
	})
}
function ensureDir(a) {
	var c = false;
	try {
		c = fs.statSync(a).isDirectory()
	} catch (b) {
	}
	if (!c) {
		fs.mkdirSync(a, 511)
	}
}
ensureDir("dist");
ensureDir("dist/test");
buildFirefox();
buildBrowser();
buildBrowserMin();