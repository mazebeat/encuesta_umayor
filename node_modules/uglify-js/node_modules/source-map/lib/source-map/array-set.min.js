if (typeof define !== "function") {
	var define = require("amdefine")(module, require)
}
define(function (d, e, c) {
	var f = d("./util");

	function a() {
		this._array = [];
		this._set = {}
	}

	a.fromArray = function i(o, m) {
		var p = new a();
		for (var n = 0, l = o.length; n < l; n++) {
			p.add(o[n], m)
		}
		return p
	};
	a.prototype.add = function k(m, o) {
		var n = this.has(m);
		var l = this._array.length;
		if (!n || o) {
			this._array.push(m)
		}
		if (!n) {
			this._set[f.toSetString(m)] = l
		}
	};
	a.prototype.has = function j(l) {
		return Object.prototype.hasOwnProperty.call(this._set, f.toSetString(l))
	};
	a.prototype.indexOf = function b(l) {
		if (this.has(l)) {
			return this._set[f.toSetString(l)]
		}
		throw new Error('"' + l + '" is not in the set.')
	};
	a.prototype.at = function h(l) {
		if (l >= 0 && l < this._array.length) {
			return this._array[l]
		}
		throw new Error("No element indexed by " + l)
	};
	a.prototype.toArray = function g() {
		return this._array.slice()
	};
	e.ArraySet = a
});