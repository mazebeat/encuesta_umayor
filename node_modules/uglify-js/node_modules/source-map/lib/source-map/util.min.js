if (typeof define !== "function") {
	var define = require("amdefine")(module, require)
}
define(function (i, j, f) {
	function o(s, r, q) {
		if (r in s) {
			return s[r]
		} else {
			if (arguments.length === 3) {
				return q
			} else {
				throw new Error('"' + r + '" is a required argument.')
			}
		}
	}

	j.getArg = o;
	var l = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var g = /^data:.+\,.+$/;

	function c(r) {
		var q = r.match(l);
		if (!q) {
			return null
		}
		return {scheme: q[1], auth: q[2], host: q[3], port: q[4], path: q[5]}
	}

	j.urlParse = c;
	function n(r) {
		var q = "";
		if (r.scheme) {
			q += r.scheme + ":"
		}
		q += "//";
		if (r.auth) {
			q += r.auth + "@"
		}
		if (r.host) {
			q += r.host
		}
		if (r.port) {
			q += ":" + r.port
		}
		if (r.path) {
			q += r.path
		}
		return q
	}

	j.urlGenerate = n;
	function k(u) {
		var x = u;
		var s = c(u);
		if (s) {
			if (!s.path) {
				return u
			}
			x = s.path
		}
		var w = (x.charAt(0) === "/");
		var v = x.split(/\/+/);
		for (var r, q = 0, t = v.length - 1; t >= 0; t--) {
			r = v[t];
			if (r === ".") {
				v.splice(t, 1)
			} else {
				if (r === "..") {
					q++
				} else {
					if (q > 0) {
						if (r === "") {
							v.splice(t + 1, q);
							q = 0
						} else {
							v.splice(t, 2);
							q--
						}
					}
				}
			}
		}
		x = v.join("/");
		if (x === "") {
			x = w ? "/" : "."
		}
		if (s) {
			s.path = x;
			return n(s)
		}
		return x
	}

	j.normalize = k;
	function e(u, q) {
		var r = c(q);
		var t = c(u);
		if (t) {
			u = t.path || "/"
		}
		if (r && !r.scheme) {
			if (t) {
				r.scheme = t.scheme
			}
			return n(r)
		}
		if (r || q.match(g)) {
			return q
		}
		if (t && !t.host && !t.path) {
			t.host = q;
			return n(t)
		}
		var s = q.charAt(0) === "/" ? q : k(u.replace(/\/+$/, "") + "/" + q);
		if (t) {
			t.path = s;
			return n(t)
		}
		return s
	}

	j.join = e;
	function m(q) {
		return "$" + q
	}

	j.toSetString = m;
	function h(q) {
		return q.substr(1)
	}

	j.fromSetString = h;
	function b(s, r) {
		s = s.replace(/\/$/, "");
		var q = c(s);
		if (r.charAt(0) == "/" && q && q.path == "/") {
			return r.slice(1)
		}
		return r.indexOf(s + "/") === 0 ? r.substr(s.length + 1) : r
	}

	j.relative = b;
	function d(s, q) {
		var t = s || "";
		var r = q || "";
		return (t > r) - (t < r)
	}

	function a(r, q, t) {
		var s;
		s = d(r.source, q.source);
		if (s) {
			return s
		}
		s = r.originalLine - q.originalLine;
		if (s) {
			return s
		}
		s = r.originalColumn - q.originalColumn;
		if (s || t) {
			return s
		}
		s = d(r.name, q.name);
		if (s) {
			return s
		}
		s = r.generatedLine - q.generatedLine;
		if (s) {
			return s
		}
		return r.generatedColumn - q.generatedColumn
	}

	j.compareByOriginalPositions = a;
	function p(s, r, q) {
		var t;
		t = s.generatedLine - r.generatedLine;
		if (t) {
			return t
		}
		t = s.generatedColumn - r.generatedColumn;
		if (t || q) {
			return t
		}
		t = d(s.source, r.source);
		if (t) {
			return t
		}
		t = s.originalLine - r.originalLine;
		if (t) {
			return t
		}
		t = s.originalColumn - r.originalColumn;
		if (t) {
			return t
		}
		return d(s.name, r.name)
	}

	j.compareByGeneratedPositions = p
});