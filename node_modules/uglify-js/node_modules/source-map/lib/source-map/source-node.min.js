if (typeof define !== "function") {
	var define = require("amdefine")(module, require)
}
define(function (j, r, c) {
	var l = j("./source-map-generator").SourceMapGenerator;
	var a = j("./util");
	var p = /(\r?\n)/g;
	var e = /\r\n|[\s\S]/g;

	function g(v, s, t, u, w) {
		this.children = [];
		this.sourceContents = {};
		this.line = v === undefined ? null : v;
		this.column = s === undefined ? null : s;
		this.source = t === undefined ? null : t;
		this.name = w === undefined ? null : w;
		if (u != null) {
			this.add(u)
		}
	}

	g.fromStringWithSourceMap = function d(s, z) {
		var w = new g();
		var A = s.split(p);
		var y = function () {
			var B = A.shift();
			var C = A.shift() || "";
			return B + C
		};
		var x = 1, t = 0;
		var u = null;
		z.eachMapping(function (B) {
			if (u !== null) {
				if (x < B.generatedLine) {
					var D = "";
					v(u, y());
					x++;
					t = 0
				} else {
					var C = A[0];
					var D = C.substr(0, B.generatedColumn - t);
					A[0] = C.substr(B.generatedColumn - t);
					t = B.generatedColumn;
					v(u, D);
					u = B;
					return
				}
			}
			while (x < B.generatedLine) {
				w.add(y());
				x++
			}
			if (t < B.generatedColumn) {
				var C = A[0];
				w.add(C.substr(0, B.generatedColumn));
				A[0] = C.substr(B.generatedColumn);
				t = B.generatedColumn
			}
			u = B
		}, this);
		if (A.length > 0) {
			if (u) {
				v(u, y())
			}
			w.add(A.join(""))
		}
		z.sources.forEach(function (B) {
			var C = z.sourceContentFor(B);
			if (C) {
				w.setSourceContent(B, C)
			}
		});
		return w;
		function v(B, C) {
			if (B === null || B.source === undefined) {
				w.add(C)
			} else {
				w.add(new g(B.originalLine, B.originalColumn, B.source, C, B.name))
			}
		}
	};
	g.prototype.add = function i(s) {
		if (Array.isArray(s)) {
			s.forEach(function (t) {
				this.add(t)
			}, this)
		} else {
			if (s instanceof g || typeof s === "string") {
				if (s) {
					this.children.push(s)
				}
			} else {
				throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + s)
			}
		}
		return this
	};
	g.prototype.prepend = function o(s) {
		if (Array.isArray(s)) {
			for (var t = s.length - 1; t >= 0; t--) {
				this.prepend(s[t])
			}
		} else {
			if (s instanceof g || typeof s === "string") {
				this.children.unshift(s)
			} else {
				throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + s)
			}
		}
		return this
	};
	g.prototype.walk = function b(v) {
		var t;
		for (var u = 0, s = this.children.length; u < s; u++) {
			t = this.children[u];
			if (t instanceof g) {
				t.walk(v)
			} else {
				if (t !== "") {
					v(t, {source: this.source, line: this.line, column: this.column, name: this.name})
				}
			}
		}
	};
	g.prototype.join = function q(u) {
		var v;
		var t;
		var s = this.children.length;
		if (s > 0) {
			v = [];
			for (t = 0; t < s - 1; t++) {
				v.push(this.children[t]);
				v.push(u)
			}
			v.push(this.children[t]);
			this.children = v
		}
		return this
	};
	g.prototype.replaceRight = function k(t, s) {
		var u = this.children[this.children.length - 1];
		if (u instanceof g) {
			u.replaceRight(t, s)
		} else {
			if (typeof u === "string") {
				this.children[this.children.length - 1] = u.replace(t, s)
			} else {
				this.children.push("".replace(t, s))
			}
		}
		return this
	};
	g.prototype.setSourceContent = function n(s, t) {
		this.sourceContents[a.toSetString(s)] = t
	};
	g.prototype.walkSourceContents = function m(v) {
		for (var u = 0, s = this.children.length; u < s; u++) {
			if (this.children[u] instanceof g) {
				this.children[u].walkSourceContents(v)
			}
		}
		var t = Object.keys(this.sourceContents);
		for (var u = 0, s = t.length; u < s; u++) {
			v(a.fromSetString(t[u]), this.sourceContents[t[u]])
		}
	};
	g.prototype.toString = function f() {
		var s = "";
		this.walk(function (t) {
			s += t
		});
		return s
	};
	g.prototype.toStringWithSourceMap = function h(z) {
		var u = {code: "", line: 1, column: 0};
		var x = new l(z);
		var y = false;
		var w = null;
		var s = null;
		var v = null;
		var t = null;
		this.walk(function (A, B) {
			u.code += A;
			if (B.source !== null && B.line !== null && B.column !== null) {
				if (w !== B.source || s !== B.line || v !== B.column || t !== B.name) {
					x.addMapping({
						source: B.source,
						original: {line: B.line, column: B.column},
						generated: {line: u.line, column: u.column},
						name: B.name
					})
				}
				w = B.source;
				s = B.line;
				v = B.column;
				t = B.name;
				y = true
			} else {
				if (y) {
					x.addMapping({generated: {line: u.line, column: u.column}});
					w = null;
					y = false
				}
			}
			A.match(e).forEach(function (D, C, E) {
				if (p.test(D)) {
					u.line++;
					u.column = 0;
					if (C + 1 === E.length) {
						w = null;
						y = false
					} else {
						if (y) {
							x.addMapping({
								source: B.source,
								original: {line: B.line, column: B.column},
								generated: {line: u.line, column: u.column},
								name: B.name
							})
						}
					}
				} else {
					u.column += D.length
				}
			})
		});
		this.walkSourceContents(function (A, B) {
			x.setSourceContent(A, B)
		});
		return {code: u.code, map: x}
	};
	r.SourceNode = g
});