if (typeof define !== "function") {
	var define = require("amdefine")(module, require)
}
define(function (c, b, e) {
	var d = c("../../lib/source-map/array-set").ArraySet;

	function a() {
		var g = new d();
		for (var f = 0; f < 100; f++) {
			g.add(String(f))
		}
		return g
	}

	b["test .has() membership"] = function (g, f) {
		var j = a();
		for (var h = 0; h < 100; h++) {
			g.ok(j.has(String(h)))
		}
	};
	b["test .indexOf() elements"] = function (g, f) {
		var j = a();
		for (var h = 0; h < 100; h++) {
			g.strictEqual(j.indexOf(String(h)), h)
		}
	};
	b["test .at() indexing"] = function (g, f) {
		var j = a();
		for (var h = 0; h < 100; h++) {
			g.strictEqual(j.at(h), String(h))
		}
	};
	b["test creating from an array"] = function (g, f) {
		var h = d.fromArray(["foo", "bar", "baz", "quux", "hasOwnProperty"]);
		g.ok(h.has("foo"));
		g.ok(h.has("bar"));
		g.ok(h.has("baz"));
		g.ok(h.has("quux"));
		g.ok(h.has("hasOwnProperty"));
		g.strictEqual(h.indexOf("foo"), 0);
		g.strictEqual(h.indexOf("bar"), 1);
		g.strictEqual(h.indexOf("baz"), 2);
		g.strictEqual(h.indexOf("quux"), 3);
		g.strictEqual(h.at(0), "foo");
		g.strictEqual(h.at(1), "bar");
		g.strictEqual(h.at(2), "baz");
		g.strictEqual(h.at(3), "quux")
	};
	b["test that you can add __proto__; see github issue #30"] = function (g, f) {
		var h = new d();
		h.add("__proto__");
		g.ok(h.has("__proto__"));
		g.strictEqual(h.at(0), "__proto__");
		g.strictEqual(h.indexOf("__proto__"), 0)
	};
	b["test .fromArray() with duplicates"] = function (g, f) {
		var h = d.fromArray(["foo", "foo"]);
		g.ok(h.has("foo"));
		g.strictEqual(h.at(0), "foo");
		g.strictEqual(h.indexOf("foo"), 0);
		g.strictEqual(h.toArray().length, 1);
		h = d.fromArray(["foo", "foo"], true);
		g.ok(h.has("foo"));
		g.strictEqual(h.at(0), "foo");
		g.strictEqual(h.at(1), "foo");
		g.strictEqual(h.indexOf("foo"), 0);
		g.strictEqual(h.toArray().length, 2)
	};
	b["test .add() with duplicates"] = function (g, f) {
		var h = new d();
		h.add("foo");
		h.add("foo");
		g.ok(h.has("foo"));
		g.strictEqual(h.at(0), "foo");
		g.strictEqual(h.indexOf("foo"), 0);
		g.strictEqual(h.toArray().length, 1);
		h.add("foo", true);
		g.ok(h.has("foo"));
		g.strictEqual(h.at(0), "foo");
		g.strictEqual(h.at(1), "foo");
		g.strictEqual(h.indexOf("foo"), 0);
		g.strictEqual(h.toArray().length, 2)
	}
});