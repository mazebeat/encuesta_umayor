unused_funarg_1:{
	options = {unused: true};
	input:{
		function f(h, g, k, j, i) {
			return h + g
		}
	}
	expect:{
		function f(d, c) {
			return d + c
		}
	}
}
unused_funarg_2:{
	options = {unused: true};
	input:{
		function f(h, g, k, j, i) {
			return h + k
		}
	}
	expect:{
		function f(e, d, g) {
			return e + g
		}
	}
}
unused_nested_function:{
	options = {unused: true};
	input:{
		function f(a, c) {
			function b() {
				something()
			}

			return a + c
		}
	}
	expect:{
		function f(a, b) {
			return a + b
		}
	}
}
unused_circular_references_1:{
	options = {unused: true};
	input:{
		function f(a, d) {
			function c() {
				return b()
			}

			function b() {
				return c()
			}

			return a + d
		}
	}
	expect:{
		function f(a, b) {
			return a + b
		}
	}
}
unused_circular_references_2:{
	options = {unused: true};
	input:{
		function f(a, g) {
			var e = 1, c = d, d = e + c, b = moo();
			return a + g
		}
	}
	expect:{
		function f(a, b) {
			moo();
			return a + b
		}
	}
}
unused_circular_references_3:{
	options = {unused: true};
	input:{
		function f(a, d) {
			var c = function () {
				return b()
			};
			var b = function () {
				return c()
			};
			return a + d
		}
	}
	expect:{
		function f(a, b) {
			return a + b
		}
	}
}
unused_keep_setter_arg:{
	options = {unused: true};
	input:{
		var x = {
			_foo: null, set foo(a) {
			}, get foo() {
				return this._foo
			}
		}
	}
	expect:{
		var x = {
			_foo: null, set foo(a) {
			}, get foo() {
				return this._foo
			}
		}
	}
}
unused_var_in_catch:{
	options = {unused: true};
	input:{
		function foo() {
			try {
				foo()
			} catch (b) {
				var a = 10
			}
		}
	}
	expect:{
		function foo() {
			try {
				foo()
			} catch (a) {
			}
		}
	}
}
used_var_in_catch:{
	options = {unused: true};
	input:{
		function foo() {
			try {
				foo()
			} catch (b) {
				var a = 10
			}
			return a
		}
	}
	expect:{
		function foo() {
			try {
				foo()
			} catch (b) {
				var a = 10
			}
			return a
		}
	}
}
;