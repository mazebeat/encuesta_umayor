var path = require("path");
var fs = require("fs");
var vm = require("vm");
var sys = require("util");
var UglifyJS = vm.createContext({sys: sys, console: console, MOZ_SourceMap: require("source-map")});
function load_global(b) {
	b = path.resolve(path.dirname(module.filename), b);
	try {
		var c = fs.readFileSync(b, "utf8");
		return vm.runInContext(c, UglifyJS, b)
	} catch (a) {
		sys.debug("ERROR in file: " + b + " / " + a);
		process.exit(1)
	}
}
var FILES = exports.FILES = ["../lib/utils.js", "../lib/ast.js", "../lib/parse.js", "../lib/transform.js", "../lib/scope.js", "../lib/output.js", "../lib/compress.js", "../lib/sourcemap.js", "../lib/mozilla-ast.js"].map(function (a) {
	return path.join(path.dirname(fs.realpathSync(__filename)), a)
});
FILES.forEach(load_global);
UglifyJS.AST_Node.warn_function = function (a) {
	sys.error("WARN: " + a)
};
for (var i in UglifyJS) {
	if (UglifyJS.hasOwnProperty(i)) {
		exports[i] = UglifyJS[i]
	}
}
exports.minify = function (a, k) {
	k = UglifyJS.defaults(k, {
		spidermonkey: false,
		outSourceMap: null,
		sourceRoot: null,
		inSourceMap: null,
		fromString: false,
		warnings: false,
		mangle: {},
		output: null,
		compress: {}
	});
	UglifyJS.base54.reset();
	var h = null, g = {};
	if (k.spidermonkey) {
		h = UglifyJS.AST_Node.from_mozilla_ast(a)
	} else {
		if (typeof a == "string") {
			a = [a]
		}
		a.forEach(function (l) {
			var m = k.fromString ? l : fs.readFileSync(l, "utf8");
			g[l] = m;
			h = UglifyJS.parse(m, {filename: k.fromString ? "?" : l, toplevel: h})
		})
	}
	if (k.compress) {
		var f = {warnings: k.warnings};
		UglifyJS.merge(f, k.compress);
		h.figure_out_scope();
		var b = UglifyJS.Compressor(f);
		h = h.transform(b)
	}
	if (k.mangle) {
		h.figure_out_scope();
		h.compute_char_frequency();
		h.mangle_names(k.mangle)
	}
	var e = k.inSourceMap;
	var c = {};
	if (typeof k.inSourceMap == "string") {
		e = fs.readFileSync(k.inSourceMap, "utf8")
	}
	if (k.outSourceMap) {
		c.source_map = UglifyJS.SourceMap({file: k.outSourceMap, orig: e, root: k.sourceRoot});
		if (k.sourceMapIncludeSources) {
			for (var d in g) {
				if (g.hasOwnProperty(d)) {
					c.source_map.get().setSourceContent(d, g[d])
				}
			}
		}
	}
	if (k.output) {
		UglifyJS.merge(c, k.output)
	}
	var j = UglifyJS.OutputStream(c);
	h.print(j);
	if (k.outSourceMap) {
		j += "\n//# sourceMappingURL=" + k.outSourceMap
	}
	return {code: j + "", map: c.source_map + ""}
};
exports.describe_ast = function () {
	var b = UglifyJS.OutputStream({beautify: true});

	function a(d) {
		b.print("AST_" + d.TYPE);
		var c = d.SELF_PROPS.filter(function (e) {
			return !/^\$/.test(e)
		});
		if (c.length > 0) {
			b.space();
			b.with_parens(function () {
				c.forEach(function (f, e) {
					if (e) {
						b.space()
					}
					b.print(f)
				})
			})
		}
		if (d.documentation) {
			b.space();
			b.print_string(d.documentation)
		}
		if (d.SUBCLASSES.length > 0) {
			b.space();
			b.with_block(function () {
				d.SUBCLASSES.forEach(function (f, e) {
					b.indent();
					a(f);
					b.newline()
				})
			})
		}
	}

	a(UglifyJS.AST_Node);
	return b + ""
};