var spawn = require("child_process").spawn, fs = require("fs"), path = require("path"), jar, exists = fs.exists || path.exists, lists = fs.readdirSync(path.join(__dirname, "../build"));
lists.some(function (a) {
	if (path.extname(a) === ".jar") {
		jar = path.join(__dirname, "../build/", a);
		return true
	}
});
exports.jar = jar;
var defaultOptions = {charset: "utf8", type: "js"};
var validOptions = {charset: 1, type: 1, "line-break": 1, nomunge: 1, "preserve-semi": 1, "disable-optimizations": 1};
var getString = function (b, c, a) {
	exists(b, function (e) {
		if (e) {
			var d = (path.extname(b)).replace(".", "");
			fs.readFile(b, "utf8", function (f, g) {
				a.type = d;
				c(f, g, a)
			})
		} else {
			c(null, b, a)
		}
	})
};
var filterOptions = function (a) {
	Object.keys(a).forEach(function (b) {
		if (!validOptions[b]) {
			delete a[b]
		}
	});
	a.type = a.type || "js";
	a.charset = a.charset || "utf8";
	return a
};
var compressString = function (e, d, g) {
	d = filterOptions(d);
	var c = ["-jar", exports.jar], b = "", a = "", f;
	Object.keys(d).forEach(function (h) {
		c.push("--" + h);
		if (d[h] && d[h] !== true) {
			c.push(d[h])
		}
	});
	f = spawn("java", c, {stdio: ["pipe", "pipe", "pipe"]});
	f.stdin.write(e);
	f.stdin.end();
	f.stdout.on("data", function (h) {
		b += h
	});
	f.stderr.on("data", function (h) {
		a += h
	});
	f.on("exit", function () {
		var h = null;
		if (a.indexOf("[ERROR]") > -1) {
			h = a
		}
		g(h, b, a)
	})
};
var compress = function (b, a, c) {
	if (typeof a === "function") {
		c = a;
		a = defaultOptions
	}
	getString(b, function (e, f, d) {
		compressString(f, d, c)
	}, a)
};
exports.compress = compress;
exports.compressString = compressString;